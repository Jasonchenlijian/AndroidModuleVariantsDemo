if (isModule.toBoolean()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode 1
        versionName "1.0"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [ moduleName : project.getName() ]
            }
        }

        flavorDimensions "versionCode"
    }

    sourceSets {
        main {
            if (isModule.toBoolean()) {
                manifest.srcFile 'src/main/module/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java {
                    exclude 'module/**'
                }
            }
        }
    }

    buildTypes {
        if (isModule.toBoolean()) {
            release {
                buildConfigField "boolean", "LOG_DEBUG", "true"
                zipAlignEnabled true
                shrinkResources true
                minifyEnabled true
                debuggable false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            }

            debug {
                applicationIdSuffix ".debug"
                buildConfigField "boolean", "LOG_DEBUG", "true"
                zipAlignEnabled false
                shrinkResources false
                minifyEnabled false
                debuggable true
            }
        }
    }

    publishNonDefault true
    productFlavors{
        flavorsOne{
            if (isModule.toBoolean()) {
                applicationId "com.clj.main.one"
            }
        }
        flavorsTwo{
            if (isModule.toBoolean()) {
                applicationId "com.clj.main.two"
            }
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    compile project(path: ':lib_common')

    annotationProcessor rootProject.ext.dependencies["arouter_compiler"]
}
